allprojects {

    apply plugin: 'java'


    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
        testCompile 'com.googlecode.catch-exception:catch-exception:1.2.0'
        testCompile 'com.github.stefanbirkner:system-rules:1.15.0'
        testCompile 'org.assertj:assertj-core:3.2.0'
        testCompile 'pl.pragmatists:JUnitParams:1.0.4'
        testCompile 'org.powermock:powermock-api-mockito:1.6.4'
        testCompile 'org.mockito:mockito-all:1.10.19'
        testCompile 'org.powermock:powermock-core:1.6.4'
        testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    }

    group = 'gov.nasa.jpf.jpf-core'
    version = '0.1'
}

subprojects {
    apply plugin: 'maven'
}

apply plugin: 'distribution'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
configurations {
    examplesClasspath.extendsFrom compile
    testClasspath.extendsFrom compile, testCompile

    jpf_annotations {
        transitive = false
    }

    jpf_classes {
        extendsFrom(jpf_annotations)
        jpf_classes.transitive = false
    }

    jpf {
        extendsFrom(jpf_annotations)
        jpf.transitive = false
    }
    runnable {
        transitive = false
    }

    distArchives
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

dependencies {
    compile project(':annotations')
    compile project(':classes')
    compile project(':main')
    testCompile project(':peers')
    testRuntime project(':peers')
    testRuntime project(':main')
    testRuntime project(':annotations')
    testRuntime project(':classes')
    testRuntime files('build/RunJPF.jar', 'build/RunTest.jar', 'bin')
    jpf_annotations project(':annotations')
    jpf_classes project(':classes')
    jpf project(':peers')
    jpf project(':main')
    runnable project(':main')
}

sourceSets {
    examples {
        java {
            compileClasspath = configurations.examplesClasspath
            srcDirs = ['src/examples']
            output.classesDir = 'build/examples'
        }
    }

    test {
        java {
            compileClasspath += sourceSets.examples.output
            runtimeClasspath += jar.outputs.files
            srcDirs = ['src/tests']
            output.classesDir = 'build/tests'
        }
    }
}

tasks.withType(Jar) {
    destinationDir = project.buildDir
}

task jpf(type: Jar) {
    from {
        configurations.jpf.collect({ zipTree(it) })
    }
    from {
        configurations.jpf_classes.collect({
            zipTree(it).matching {
                include 'org/junit/*.class'
            }
        })
    }
    archiveName = 'jpf.jar'
    with jar
}

task jpf_annotations(type: Jar, dependsOn: project(':annotations').assemble) {
    from zipTree(configurations.jpf_annotations.singleFile)
    archiveName = 'jpf-annotations.jar'
    with jar
}

task jpf_classes(type: Jar) {
    from {
        configurations.jpf_classes.collect({ zipTree(it) })
    }
    from zipTree(configurations.runnable.singleFile).matching {
        //we need this one in case a SUT uses the Verify API
        include 'gov/nasa/jpf/vm/Verify.class',
                //these are required if we run TestJPF derived test classes
                'gov/nasa/jpf/JPFShell.class',
                'gov/nasa/jpf/util/TypeRef.class',
                'gov/nasa/jpf/util/test/TestJPF.class',
                'gov/nasa/jpf/util/test/TestMultiProcessJPF.class',
                'gov/nasa/jpf/util/test/TestJPFHelper.class'
    }
    archiveName = 'jpf-classes.jar'
    with jar
}

task runJPF(type: Jar) {
    archiveName = 'RunJPF.jar'
    from {
        zipTree(configurations.runnable.singleFile).matching {
            include 'gov/nasa/jpf/tool/Run.class',
                    'gov/nasa/jpf/tool/RunJPF.class',
                    'gov/nasa/jpf/Config.class',
                    'gov/nasa/jpf/ConfigChangeListener.class',
                    'gov/nasa/jpf/Config$MissingRequiredKeyException.class',
                    'gov/nasa/jpf/JPFClassLoader.class',
                    'gov/nasa/jpf/JPFShell.class',
                    'gov/nasa/jpf/JPFException.class',
                    'gov/nasa/jpf/JPFConfigException.class',
                    'gov/nasa/jpf/JPFTargetException.class',
                    'gov/nasa/jpf/util/JPFSiteUtils.class',
                    'gov/nasa/jpf/util/FileUtils.class',
                    'gov/nasa/jpf/util/StringMatcher.class',
                    'gov/nasa/jpf/util/Pair.class'
        }
    }
    manifest {
        attributes(
                'Implementation-Title': 'Java Pathfinder core launch system',
                'Implementation-Vendor': 'NASA Ames Research Center',
                'Main-Class': 'gov.nasa.jpf.tool.RunJPF'
        )
    }
}

task classloader_specific_tests(type: Jar) {
    archiveName = 'classloader_specific_tests.jar'
    from sourceSets.test.output
    include '**/classloader_specific_tests/*.class'
    exclude 'java8'
    exclude 'gov'
}

task runTestJar(type: Jar) {
    archiveName = 'RunTest.jar'
    from {
        zipTree(configurations.runnable.singleFile).matching {
            include 'gov/nasa/jpf/tool/Run.class',
                    'gov/nasa/jpf/tool/RunTest.class',
                    'gov/nasa/jpf/tool/RunTest$Failed.class',
                    'gov/nasa/jpf/Config.class',
                    'gov/nasa/jpf/ConfigChangeListener.class',
                    'gov/nasa/jpf/Config$MissingRequiredKeyException.class',
                    'gov/nasa/jpf/JPFClassLoader.class',
                    'gov/nasa/jpf/JPFException.class',
                    'gov/nasa/jpf/JPFConfigException.class',
                    'gov/nasa/jpf/util/JPFSiteUtils.class',
                    'gov/nasa/jpf/util/FileUtils.class',
                    'gov/nasa/jpf/util/StringMatcher.class',
                    'gov/nasa/jpf/util/DevNullPrintStream.class'

        }
    }
    manifest {
        attributes(
                'Implementation-Title': 'Java Pathfinder test launch system',
                'Implementation-Vendor': 'NASA Ames Research Center',
                'Main-Class': 'gov.nasa.jpf.tool.RunTest'
        )
    }
}

task distAssemble(dependsOn: [subprojects.assemble, tasks.withType(Jar)]) {

}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalClassDirs = files(subprojects.sourceSets.main.output.classesDir)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    executionData = files("$buildDir/jacoco/test.exec")
    onlyIf = {
        true
    }
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

test {
    testLogging.showStandardStreams = false

    maxHeapSize = "1g"

    outputs.upToDateWhen { false }
    scanForTestClasses = false
    include '**/*Test.*'
    exclude '**/JPF_*.class'
    exclude '**/SplitInputStreamTest.class'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    // uncomment this to don't fail build on error
    //ignoreFailures = true
    reports {
        html.enabled = true
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
        exclude 'gov/nasa/jpf/test/vm/basic/LargeCodeTest*'
    }
    test.dependsOn(distAssemble)
    test.shouldRunAfter distAssemble
}

assemble {
    onlyIf {
        false
    }
}

jar {
    onlyIf {
        false
    }
}

task makeAssemble(type: Copy) {
    dependsOn distAssemble
    into("$buildDir/dist")
    from { 'jpf.properties' }
    into('build') {
        from {
            tasks.withType(Jar).collect {
                it.archivePath
            }
        }
    }
    into('bin') {
        from { 'bin' }
    }

}

distZip {
    distZip.dependsOn makeAssemble
    into('jpf-core') {
        from {
            makeAssemble.outputs
        }
    }
}

distTar {
    distTar.dependsOn makeAssemble
    into('jpf-core') {
        from {
            makeAssemble.outputs
        }
    }
}

installDist.dependsOn distZip
installDist.dependsOn distTar

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoTestReport
    onlyIf { System.env.'CI' }
} 
