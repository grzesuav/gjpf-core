allprojects {

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }
}

configurations {
    examplesClasspath.extendsFrom compile
    testClasspath.extendsFrom compile, testCompile

    jpf_annotations {
        transitive = false
    }

    jpf_classes {
        extendsFrom(jpf_annotations)
        jpf_classes.transitive = false
    }

    jpf {
        extendsFrom(jpf_annotations)
        jpf.transitive = false
    }
    runnable {
        transitive = false
    }

}

dependencies {
    compile project(':annotations')
    compile project(':classes')
    compile project(':main')
    testCompile project(':peers')
    testRuntime project(':peers')
    testRuntime project(':main')
    testRuntime project(':annotations')
    testRuntime project(':classes')
    testRuntime files('build/RunJPF.jar', 'build/RunTest.jar', 'bin')
    jpf_annotations project(':annotations')
    jpf_classes project(':classes')
    jpf project(':peers')
    jpf project(':main')
    runnable project(':main')
}

sourceSets {
    examples {
        java {
            compileClasspath = configurations.examplesClasspath
            srcDirs = ['src/examples']
            output.classesDir = 'build/examples'
        }
    }

    test {
        java {
            compileClasspath += sourceSets.examples.output
            runtimeClasspath += jar.outputs.files
            srcDirs = ['src/tests']
            output.classesDir = 'build/tests'
        }
    }
}


test {
    outputs.upToDateWhen { false }
    scanForTestClasses = false
    include '**/*Test.*'
    exclude '**/JPF_*.class'
    exclude '**/SplitInputStreamTest.class'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    //ignoreFailures = true
    reports {
        html.enabled = true
    }
}

tasks.withType(Jar) {
    destinationDir = project.buildDir
}

task jpf_annotations(type: Jar, dependsOn: project(':annotations').assemble) {
    from zipTree(configurations.jpf_annotations.singleFile)
    baseName = 'jpf-annotations'
    with jar
}

task jpf_classes(type: Jar) {
    from {
        configurations.jpf_classes.collect({ zipTree(it) })
    }
    from zipTree(configurations.runnable.singleFile).matching {
        //we need this one in case a SUT uses the Verify API
        include 'gov/nasa/jpf/vm/Verify.class',
                //these are required if we run TestJPF derived test classes
                'gov/nasa/jpf/JPFShell.class',
                'gov/nasa/jpf/util/TypeRef.class',
                'gov/nasa/jpf/util/test/TestJPF.class',
                'gov/nasa/jpf/util/test/TestMultiProcessJPF.class',
                'gov/nasa/jpf/util/test/TestJPFHelper.class'
    }
    baseName = 'jpf-classes'
    with jar
}

task jpf(type: Jar) {
    from {
        configurations.jpf.collect({ zipTree(it) })
    }
    from {
        configurations.jpf_classes.collect({
            zipTree(it).matching {
                include 'org/junit/*.class'
            }
        })
    }
    baseName = 'jpf'
    with jar
}

task runJPF(type: Jar) {
    baseName = 'RunJPF'
    from {
        zipTree(configurations.runnable.singleFile).matching {
            include 'gov/nasa/jpf/tool/Run.class',
                    'gov/nasa/jpf/tool/RunJPF.class',
                    'gov/nasa/jpf/Config.class',
                    'gov/nasa/jpf/ConfigChangeListener.class',
                    'gov/nasa/jpf/Config$MissingRequiredKeyException.class',
                    'gov/nasa/jpf/JPFClassLoader.class',
                    'gov/nasa/jpf/JPFShell.class',
                    'gov/nasa/jpf/JPFException.class',
                    'gov/nasa/jpf/JPFConfigException.class',
                    'gov/nasa/jpf/JPFTargetException.class',
                    'gov/nasa/jpf/util/JPFSiteUtils.class',
                    'gov/nasa/jpf/util/FileUtils.class',
                    'gov/nasa/jpf/util/StringMatcher.class',
                    'gov/nasa/jpf/util/Pair.class'

        }
    }
    manifest {
        attributes(
                'Implementation-Title': 'Java Pathfinder core launch system',
                'Implementation-Vendor': 'NASA Ames Research Center',
                'Main-Class': 'gov.nasa.jpf.tool.RunJPF'
        )
    }
}

task classloader_specific_tests(type: Jar) {
    baseName = 'classloader_specific_tests'
    from sourceSets.test.output
    include '**/classloader_specific_tests/*.class'
    exclude 'java8'
    exclude 'gov'
}

task runTestJar(type: Jar) {
    baseName = 'RunTest'
    from {
        zipTree(configurations.runnable.singleFile).matching {
            include 'gov/nasa/jpf/tool/Run.class',
                    'gov/nasa/jpf/tool/RunTest.class',
                    'gov/nasa/jpf/tool/RunTest$Failed.class',
                    'gov/nasa/jpf/Config.class',
                    'gov/nasa/jpf/ConfigChangeListener.class',
                    'gov/nasa/jpf/Config$MissingRequiredKeyException.class',
                    'gov/nasa/jpf/JPFClassLoader.class',
                    'gov/nasa/jpf/JPFException.class',
                    'gov/nasa/jpf/JPFConfigException.class',
                    'gov/nasa/jpf/util/JPFSiteUtils.class',
                    'gov/nasa/jpf/util/FileUtils.class',
                    'gov/nasa/jpf/util/StringMatcher.class',
                    'gov/nasa/jpf/util/DevNullPrintStream.class'

        }
    }
    manifest {
        attributes(
                'Implementation-Title': 'Java Pathfinder test launch system',
                'Implementation-Vendor': 'NASA Ames Research Center',
                'Main-Class': 'gov.nasa.jpf.tool.RunTest'
        )
    }
}


artifacts {
    archives jpf_annotations, jpf_classes, classloader_specific_tests, jpf, runJPF, runTestJar
}




